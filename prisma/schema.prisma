// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  File    File[]
  Message Message[]

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  credits Int @default(10)

  markdowns Markdown[]

  @@map(name: "users")
}

model Markdown {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map(name: "markdowns")
  @@index([userId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
 name String

  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  messages     Message[]

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  User User? @relation(fields: [userId], references: [id])
  userId String?

  @@map(name: "files")
  @@index([userId])
}

model Message {
 id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String   @unique
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  File      File?         @relation(fields: [fileId], references: [id])
  fileId    String?
  User      User?         @relation(fields: [userId], references: [id])
  userId    String?

  @@map(name: "messages")
  @@index([fileId])
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}